[{"url":"/","title":"hibase-connector-docs","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"}],"content":"\n### Welcome to the hibase connectors docs"},{"url":"/awin/publisher-api-v4/","title":"Publisher Api V4","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Awin"},{"title":"Publisher Api V4","url":"/awin/publisher-api-v4/"}],"content":"# Awin Publisher API (v4)\n\n### Getting started\n\nIn order to start using the **hibase** connector to the [Awin Publisher API (v4)](http://wiki.awin.com/index.php/Publisher_API), you need to create an *API Token* for your account.\n\n1. Log into your [Awin Dashboard](https://ui.awin.com/awin-api) and navigate to the [API Credentials](https://ui.awin.com/awin-api) page\n\n2. Type in your password and click on *Show my API token*, then copy the *OAuth2 Token* that is displayed\n\n3. Navigate to your [Manage Accounts](https://ui.awin.com/user/settings/accounts) page and copy the ID of the Publisher account you want to query from hibase, shown in parentheses next to the account name\n\n4. In **hibase**, provide the *API Token* and *Publisher ID* you just copied when adding the *Awin Publisher API* connector"},{"url":"/commission-junction/apis/","title":"Apis","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Commission Junction"},{"title":"Apis","url":"/commission-junction/apis/"}],"content":"# Commission Junction APIs\n\n### Getting started\n\nFollow these steps in order to start using the **hibase** connector to the [Commission Junction APIs](https://cjcommunity.force.com/s/topic/0TO1C000000Pg3pWAC), :\n\n1. Sign up to the [Commission Junction Web Services](https://api.cj.com/sign_up.cj), using your account's username and password\n\n2. Copy the *Developer Key* that is provided to you at the end of the process\n\n3. In your [Commission Junction Account](https://members.cj.com/member/4404876/accounts/publisher/sites.cj#), navigate to [*Account > Websites*](https://members.cj.com/member/4404876/accounts/publisher/sites.cj#) and copy the ID of the website you want to associate to the Connector\n\n4. In **hibase**, provide the information you just copied when adding the *Commission Junction API* connector"},{"url":"/google-analytics/reporting-api-v4/","title":"Reporting Api V4","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Google Analytics"},{"title":"Reporting Api V4","url":"/google-analytics/reporting-api-v4/"}],"content":"# Google Analytics Reporting API (v4)\n\n### Getting started\n\nIn order to start using the hibase connector to the Google Analytics API (v4), you first need to set up a [*Service Account*](https://developers.google.com/analytics/devguides/reporting/core/v2/authorization#service_accounts) within your Google Analytics account.\n\n1. Navigate to your [Google APIs Dashboard](https://console.developers.google.com/apis/dashboard) and check whether a *Project* already exsists for your app\n\n2. If a project was not already set up, you can do so through this [Setup tool](https://console.developers.google.com/start/api?id=analytics&credential=client_key)\n\n3. Navigate to the [Google APIs Library](https://console.developers.google.com/apis/library) and activate the [**Google Analytics Reporting** API](https://console.developers.google.com/apis/library/analyticsreporting.googleapis.com) for the project if it was not already activated\n\n4. Navigate to the [Credentials](https://console.developers.google.com/apis/credentials) tab and select *Create credentials -> Service account key*\n\n5. Save your credentials as JSON. **Warning**: Store this file securely as this is the only time you will be able to download it\n\n6. You will now have to add the newly created user to your Google Analytics account. [Sign in](https://analytics.google.com/), click on *Admin* in the bottom-left corner and then on *User Management* under the account / property or view you want to give hibase access to\n\n7. In the *Account users* list, click on + in the top-right corner and then on *Add new users*\n\n8. As an email address, enter the `client_email` that you see in the JSON file saved at step 5. As permissions, select *Read & Analyze*\n\n9. Back to hibase, add a new **Google Analytics API (v4)** Connector and fill your *client email* and *private key*, which you can find in the downloaded JSON file\n\n  **Important:** make sure you correctly add **line breaks** to your private key, by substituting any occurrence of `\\n` in the JSON file with an actual line break. From:\n\n  ```json\n  \t-----BEGIN PRIVATE KEY-----\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\nXXXXXXXXXXXXX...\n  ```\n\n  ... to:\n\n  ```json\n  \t-----BEGIN PRIVATE KEY-----\n  \tXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  \tXXXXXXXXXXXXX...\n  ```\n\n10. Save the connector and you are good to go\n\nIn case you experience issues querying the API, check again the steps above and especially that you copied your *private key* correctly (step 6). You can edit the Connector you just added at any time and overwrite the credentials you originally provided."},{"url":"/linkshare/payment-api-v1/","title":"Payment Api V1","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Linkshare"},{"title":"Payment Api V1","url":"/linkshare/payment-api-v1/"}],"content":"# Linkshare Payment API (v1)\n\n### Getting started\n\nIn order to start using the hibase connector to the [Linkshare Payment API (v1)](https://pubhelp.rakutenmarketing.com/hc/en-us/articles/201046046), you first need to setup *Subscriptions* to the APIs you want to use within the [Linkshare API Developer Portal](https://developers.rakutenmarketing.com/subscribe/site/pages/subscriptions.jag).\n\n1. Log into your [Linkshare API Developer Portal](https://developers.rakutenmarketing.com/subscribe/site/pages/subscriptions.jag) and navigate to *APIs*\n\n2. In the search bar, look up the API you want to subscribe to, in this case *Advanced Reports*\n\n3. If you did not do so already, create an Application from the *Applications* drop down menu on the right. You can omit the *Callback URL* and you can select *Unlimited* as *Throttling Tier*, or anything else according to your security policy\n\n4. Back in the Subscriptions page, with the API selected, choose your desired *Application* and *Tiers* from the dropdown menus on the right and hit *Subscribe*\n\n5. As the new Subscription is created, a *Keys* section should display a few tokens\n\n6. Copy the *Token Request Authorization* hash (excluding the `Basic` word). This is the `Token Request Authorization` you will need to input in **hibase** when subscribing to the connector\n\n7. For some calls, you will need an additional `Security Token` which can be found in your [Publisher Portal](https://cli.linksynergy.com/cli/publisher/links/webServices.php) under *Links > Web Services*\n\n8. In **hibase**, when adding the *Linkshare* connector, you will need to provide the token you just copied, together with your username, password and *Merchant ID* or *Site ID* as **Scope**. The latter can be obtained by logging into your [Rakuten Marketing Account](https://rakutenmarketing.com/)\n\n9. Save the connector and you are good to make requests to the API you just subscribed to"},{"url":"/linkshare/reporting-api-v1/","title":"Reporting Api V1","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Linkshare"},{"title":"Reporting Api V1","url":"/linkshare/reporting-api-v1/"}],"content":"# Linkshare Reporting API (v1)\n\n### Getting started\n\nIn order to start using the hibase connector to the Linkshare Reporting API (v1), you need to retrieve a *Token* from the [Linkshare Reporting Interface](https://rakutenmarketing.com/affiliate):\n\n1. Log into your [Linkshare Reporting Interface](https://rakutenmarketing.com/affiliate) and navigate to *Reports*\n\n2. Within the *Reporting* Tab, click on *Choose a Report* and pick any report from the list\n\n3. Click on the down arrow next to *View Report* and select *Get API*\n\n4. Copy the token that you'll find as the last parameter in the displayed URL, excluding the \"`token=`\" key:\n\n> https://ran-reporting.rakutenmarketing.com/en/reports/...token=[XXXXX]\n\n5. In **hibase**, when adding the *Linkshare Reporting API* connector, you will need to provide the token you just copied\n\n6. Save the connector and you are good to make requests to the *Linkshare Reporting API*"},{"url":"/shareasale/reporting-api-v2-3/","title":"Reporting Api V2 3","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"ShareASale"},{"title":"Reporting Api V2 3","url":"/shareasale/reporting-api-v2-3/"}],"content":"# ShareASale Affiliate Reporting API (v2.3)\n\n### Getting started\n\nIn order to start using the **hibase** connector to the **ShareASale Merchant API (v2.3)**, you need to retrieve your *API Token* and *Secret Key* from the [ShareASale API Manager](https://account.shareasale.com/a-apimanager.cfm).\n\n<!-- Additionally, you will have to whitelist **hibase**'s IP Addresses for the API connection to work. -->\n\n1. Log into your [ShareASale Account](https://account.shareasale.com) and navigate to the [ShareASale API Manager](https://account.shareasale.com/a-apimanager.cfm)\n\n<!-- 2. Add **hibase**'s IP Addresses to the list of registered IP Addresses -->\n\n2. Copy your *Token*, *Secret Key* as displayed in the API Manager page\n\n3. Navigate to your [ShareASale Account Page](https://account.shareasale.com/a-account.cfm) and copy your *Affiliate ID*\n\n4. In **hibase**, provide the information you just copied when adding the *ShareASale Reporting API* connector\n\n5. Save the connector and you are good to make requests to the *ShareASale Reporting API*"},{"url":"/skimlinks/merchant-api-v1/","title":"Merchant Api V1","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Skimlinks"},{"title":"Merchant Api V1","url":"/skimlinks/merchant-api-v1/"}],"content":"# Skimlinks Merchant API (v3)\n\n### Getting started\n\nIn order to start using the **hibase** connector to the [Skimlinks Merchant API (v3)](http://developers.skimlinks.com/merchant.html), you need to retrieve your *API Key* from the [Skimlinks Publisher Hub](https://hub.skimlinks.com):\n\n1. Log into your [Skimlinks Publisher Hub](https://hub.skimlinks.com)\n\n2. Navigate to [*Toolbox > APIs > API Authentication Credentials*](https://hub.skimlinks.com/toolbox/api#credentials) and copy your *Account Type*, *Account ID* and *Private API Key*\n\n3. In **hibase**, provide the information you just copied when adding the *Skimlinks Merchant API* connector\n\n4. Save the connector and you are good to make requests to the *Skimlinks Merchant API*"},{"url":"/skimlinks/reporting-api-v1/","title":"Reporting Api V1","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Skimlinks"},{"title":"Reporting Api V1","url":"/skimlinks/reporting-api-v1/"}],"content":"# Skimlinks Reporting API (v1)\n\n### Getting started\n\nIn order to start using the **hibase** connector to the [Skimlinks Reporting API](https://developers.skimlinks.com/reporting.html) (v1), you need to retrieve your *API Key* from the [Skimlinks Publisher Hub](https://hub.skimlinks.com):\n\n1. Log into your [Skimlinks Publisher Hub](https://hub.skimlinks.com)\n\n2. Navigate to [*Toolbox > APIs > API Authentication Credentials*](https://hub.skimlinks.com/toolbox/api#credentials) and copy your *Account Type*, *Account ID* and *Private API Key*\n\n3. In **hibase**, provide the information you just copied when adding the *Skimlinks Reporting API* connector\n\n4. Save the connector and you are good to make requests to the *Skimlinks Reporting API*"},{"url":"/viglink/reporting-api-v1/","title":"Reporting Api V1","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"VigLink"},{"title":"Reporting Api V1","url":"/viglink/reporting-api-v1/"}],"content":"# VigLink Reporting API (v1)\n\n### Getting started\n\nIn order to start using the **hibase** connector to the [*VigLink Reporting API (v1)*](https://viglink-developer-center.readme.io/docs), you need to retrieve your *API Key* and *Secret Key* from the [VigLink Dashboard](https://sessions.viglink.com/sign-in).\n\nFor Publishers:\n\n1. Log into your [VigLink Dashboard](https://sessions.viglink.com/sign-in) and navigate to [*Settings > Sites*](https://publishers.viglink.com/publisher/sites)\n\n2. Click on the **key icon** next to the name of the Site you want to integrate with **hibase** (multiple sites will require multiple credentials to be added in **hibase**)\n\n3. Copy the *API Key* and *Secret Key* that are displayed on the screen, or generate them if needed\n\n4. In **hibase**, provide both the keys you just copied when adding the *VigLink Reporting API* connector"},{"url":"/webgains/soap-api/","title":"Soap Api","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Webgains"},{"title":"Soap Api","url":"/webgains/soap-api/"}],"content":"# Webgains SOAP API\n\n### Getting started\n\nIn order to start using the **hibase** connector to the *Webgains SOAP API*, you simply need to provide your *username* and *password* to **hibase** when adding the *Webgains SOAP API* connector."},{"url":"/commission-junction/apis/endpoints/product-catalog-search/","title":"Product Catalog Search","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Commission Junction"},{"title":"Apis","url":"/commission-junction/apis/"},{"title":"Product Catalog Search","url":"/commission-junction/apis/endpoints/product-catalog-search/"}],"content":"## Product Catalog Search API\n\nThe *Product Catalog Search API* from **Commission Junction** allows to search the products catalog and filter it by a variety of dimensions.\n\n> Please check the official documentation for the *Commission Junction Product Catalog Search API* for details on filter parameters. This can be accessed in the [Commission Junction Support Center](https://cjcommunity.force.com/s/article/Product-Catalog-Search-API-4777185) after login.\n\nParameters that are not explicitly provided by the **hibase** query interface can be added in JSON format through the `other_params` parameter, for example:\n\n```json\n  {\n    \"manufacturer-name\": \"My Brand\",\n    \"sort-by\": \"name\"\n  }\n```\n\nThere are a few important gotchas regarding this API:\n\n- **At least one** of the optional parameters is required in order for the API to return anything\n- A **maximum of 10.000 results** will be returned for any given query, even when more results match the provided parameters\n\n### Response normalization\n\nhibase does not perform any particular transformation onto data returned by this endpoint. Here is an example of what a product record might look like:\n\n```json\n  {\n    \"ad_id\": 12345678,\n    \"advertiser_id\": 12345678,\n    \"advertiser_name\": \"My Shop\",\n    \"advertiser_category\": \"Fashion\",\n    \"buy_url\": \"https://...\",\n    \"catalog_id\": \"cat:1234\",\n    \"currency\": \"EUR\",\n    \"description\": \"Lorem ipsum...\",\n    \"image_url\": \"https://...\",\n    \"in_stock\": \"true\",\n    \"isbn\": \"12345678\",\n    \"manufacturer_name\": \"My Brand\",\n    \"manufacturer_sku\": \"12345678\",\n    \"name\": \"My Product\",\n    \"price\": 42.0,\n    \"retail_price\": 42.0,\n    \"sale_price\": 42.0,\n    \"sku\": \"12345678\",\n    \"upc\": \"12345678\"\n  }\n```\n\n### Pagination\n\nThe *Product Catalog Search API* is automatically paginated by **hibase** until the full records set has been returned or the maximum 10.000 records limit has been reached.\n\nIn case more than 10.000 records match the API, you should consider breaking down your query into a more granular set of parameters."},{"url":"/commission-junction/apis/endpoints/advertiser-lookup/","title":"Advertiser Lookup","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Commission Junction"},{"title":"Apis","url":"/commission-junction/apis/"},{"title":"Advertiser Lookup","url":"/commission-junction/apis/endpoints/advertiser-lookup/"}],"content":"## Advertiser Lookup API\n\nThe *Advertiser Lookup API* from **Commission Junction** allows to search advertisers on the platform and filter them by a variety of dimensions.\n\n> Please check the official documentation for the *Commission Junction Advertiser Lookup API* for details on filter parameters. This can be accessed in the [Commission Junction Support Center](https://cjcommunity.force.com/s/article/Advertiser-Lookup-API-4777195) after login.\n\nPlease note that **at least one** of the following parameters has to be provided in order for the API to return anything: advertiser-ids, keywords or advertiser-name.\n\n### Response normalization\n\nhibase does not perform any particular transformation onto data returned by this endpoint. Here is an example of what a product record might look like:\n\n```json\n  {\n    \"ad_id\": 12345678,\n    \"advertiser_id\": 12345678,\n    \"advertiser_name\": \"My Shop\",\n    \"advertiser_category\": \"Fashion\",\n    \"buy_url\": \"https://...\",\n    \"catalog_id\": \"cat:1234\",\n    \"currency\": \"EUR\",\n    \"description\": \"Lorem ipsum...\",\n    \"image_url\": \"https://...\",\n    \"in_stock\": \"true\",\n    \"isbn\": \"12345678\",\n    \"manufacturer_name\": \"My Brand\",\n    \"manufacturer_sku\": \"12345678\",\n    \"name\": \"My Product\",\n    \"price\": 42.0,\n    \"retail_price\": 42.0,\n    \"sale_price\": 42.0,\n    \"sku\": \"12345678\",\n    \"upc\": \"12345678\"\n  }\n```\n\n### Pagination\n\nThe *Advertiser Lookup API* is automatically paginated by **hibase** until the full records set has been returned."},{"url":"/google-analytics/reporting-api-v4/endpoints/batch-reports/","title":"Batch Reports","breadcrumbs":[{"title":"hibase-connector-docs","url":"/"},{"title":"Google Analytics"},{"title":"Reporting Api V4","url":"/google-analytics/reporting-api-v4/"},{"title":"Batch Reports","url":"/google-analytics/reporting-api-v4/endpoints/batch-reports/"}],"content":"## Batch Reports\n\nThe *Batch Reports* endpoint requires you to specify a JSON Query, which must be an instance of the Google Analytics API's **[ReportRequest](https://developers.google.com/analytics/devguides/reporting/core/v4/rest/v4/reports/batchGet#ReportRequest)** class.\n\nPlease refer to the [official documentation](https://developers.google.com/analytics/devguides/reporting/core/v4/rest/v4/reports/batchGet) for details on how to compose a ReportRequest query.\n\nA valid query might look something like this:\n\n```json\n  {\n    \"viewId\":\"XXXXXXXXX\",\n    \"dateRanges\":[\n      {\n        \"startDate\":\"2018-07-30\",\n        \"endDate\":\"2018-07-31\"\n      }\n    ],\n    \"metrics\":[\n      {\"expression\":\"ga:users\"},\n      {\"expression\":\"ga:sessions\"},\n      {\"expression\":\"ga:hits\"}\n    ],\n    \"dimensions\":[\n      {\"name\":\"ga:date\"},\n      {\"name\":\"ga:city\"},\n      {\"name\":\"ga:browser\"}\n    ]\n  }\n```\n\nYou can interpolate variables into your Query through the hibase syntax, for example:\n\n```json\n  {\n    // ...\n    \"dateRanges\":[\n      {\n        \"startDate\":\"{{ $today - 7 }}\",\n        \"endDate\":\"{{ $today }}\"\n      }\n    ],\n    // ...\n  }\n```\n\n### Response normalization\n\nhibase takes care of normalizing the data coming back from the Google Analytics Reporting API, in order to represent it in a two-dimensional, tabular format.\n\nProvided this response originating from the API call...\n\n```json\n  {\n    \"reports\": [\n      {\n        \"columnHeader\": {\n          \"dimensions\": [\n            \"ga:date\",\n            \"ga:city\",\n            \"ga:browser\"\n          ],\n          \"metricHeader\": {\n            \"metricHeaderEntries\": [\n              {\n                \"name\": \"ga:users\",\n                \"type\": \"INTEGER\"\n              },\n              {\n                \"name\": \"ga:sessions\",\n                \"type\": \"INTEGER\"\n              },\n              {\n                \"name\": \"ga:hits\",\n                \"type\": \"INTEGER\"\n              }\n            ]\n          }\n        },\n        \"data\": {\n          \"rows\": [\n            {\n              \"dimensions\": [\n                \"20180727\",\n                \"Berlin\",\n                \"Chrome\"\n              ],\n              \"metrics\": [\n                {\n                  \"values\": [\n                    \"42\",\n                    \"56\",\n                    \"322\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"dimensions\": [\n                \"20180728\",\n                \"Berlin\",\n                \"Chrome\"\n              ],\n              \"metrics\": [\n                {\n                  \"values\": [\n                    \"44\",\n                    \"62\",\n                    \"398\"\n                  ]\n                }\n              ]\n            },\n            // ...\n          ]\n        }\n      }\n    ]\n  }\n```\n\n... hibase will parse it and serve it as follows:\n\n```json\n  {\n    \"headers\": [\n      {\n        \"name\": \"ga_date\",\n        \"type\": \"string\"\n      },\n      {\n        \"name\": \"ga_city\",\n        \"type\": \"string\"\n      },\n      {\n        \"name\": \"ga_browser\",\n        \"type\": \"string\"\n      },\n      {\n        \"name\": \"ga_users\",\n        \"type\": \"integer\"\n      },\n      {\n        \"name\": \"ga_sessions\",\n        \"type\": \"integer\"\n      },\n      {\n        \"name\": \"ga_hits\",\n        \"type\": \"integer\"\n      }\n    ],\n    \"data\": [\n      [\n        \"20180727\",\n        \"Berlin\",\n        \"Chrome\",\n        \"42\",\n        \"56\",\n        \"322\"\n      ],\n      [\n        \"20180728\",\n        \"Berlin\",\n        \"Chrome\",\n        \"44\",\n        \"62\",\n        \"398\"\n      ],\n      // ...\n    ]\n  }\n```\n\nAs you can see, a few things are happening here:\n\n- Colons within header names are being changed to underscores, in order to be valid as column names for a possible SQL insert: e.g. `ga:users` becomes `ga_users`\n- Header *data types* are being inferred from the response\n- Data from different paths within the JSON is being aggregated into one-dimensional rows: \n```json\n  [\n    \"20180727\",\n    \"Berlin\",\n    \"Chrome\",\n    \"42\",\n    \"56\",\n    \"322\"\n  ]\n```\n\n\n### Pagination\n\nThe Google Analytics Reporting API is paginated through the `pageToken` and `pageSize` parameters, as outlined in the [official docs](https://developers.google.com/analytics/devguides/reporting/core/v4/rest/v4/reports/batchGet). \n\nhibase takes care of automatically iterating requests if a `nextPageToken` is received from the API. If given no other instruction, it will do so until an empty data set is returned or the `nextPageToken` parameter is not returned anymore. \n\n> **NB**: Limits apply to how many subsequent calls can be made through automatic pagination. Please get in touch in case you are reaching your limits and you would like them to be increased. \n\nYou can still take back control of the API call and retrieve a specific set of records by manually providing a `pageToken` parameter in your `query`. In this case, hibase will not iterate any further regardless of what `nextPageToken` is returned by the API."}]
